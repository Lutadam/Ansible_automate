- name: Ensure the target directory exists
  file:
    path: "{{ repo_dest }}"
    state: directory

- name: Check if the repository is already cloned
  stat:
    path: "{{ repo_dest }}/.git"
  register: repo_exists

- name: Clone the repository if it doesn't exist
  git:
    repo: https://github.com/EdgeKing810/interns-docker-compose-lamp.git
    dest: "{{ repo_dest }}"
    update: no
  when: not repo_exists.stat.exists

- name: Check if the .env file exists
  stat:
    path: "{{ repo_dest }}/.env"
  register: env_file_exists

- name: Rename .env.sample to .env
  copy:
    src: "{{ repo_dest }}/.env.sample"
    dest: "{{ repo_dest }}/.env"
    remote_src: yes
  when: not env_file_exists.stat.exists
  tags: lamp
  
- name: Generate random passwords
  set_fact:
    db_password: "{{ lookup('password', '/dev/null length=16 chars=ascii_letters,digits') }}"
    db_root_password: "{{ lookup('password', '/dev/null length=12 chars=ascii_letters,digits') }}"
  when: not repo_exists.stat.exists

- name: Add specific environment variables to .env
  become: true
  lineinfile:
    path: "{{ repo_dest }}/.env"
    line: "{{ item.key }}={{ item.value }}"
    create: yes
  loop: "{{ env_variables | dict2items }}"
  vars:
    env_variables:
      DB_NAME: "{{ db_name }}"
      DB_USERNAME: "{{ db_username }}"
      DB_USER: "{{ db_user }}"
      DB_PASSWORD: "{{ db_password }}"
      DB_ROOT_PASSWORD: "{{ db_root_password }}"
      DB_DATABASE: "{{ db_database }}"
  when: not env_file_exists.stat.exists
  tags: lamp

- name: Template Dockerfile
  template:
    src: Dockerfile.j2
    dest: "{{ repo_dest }}/bin/webserver/Dockerfile"

- name: Check if docker-compose.yml already exists
  stat:
    path: "{{ repo_dest }}/docker-compose.yml"
  register: docker_compose_status

# - name: Files docker-compose.yml
#   copy:
#     src: "{{ repo_dest }}/docker-compose.yml"
#     dest: "{{ repo_dest }}/docker-compose.yml"
#   when: not docker_compose_status.stat.exists

- name: Template docker-compose.yml
  template:
    src: docker-compose.yml.j2
    dest: "{{ repo_dest }}/docker-compose.yml"
  when: not docker_compose_status.stat.exists

- name: Update DB username
  replace:
    path: "{{ repo_dest }}/webroot/index.php"
    regexp: 'root'
    replace: '{{ db_username }}'
  # notify: restart nginx
  when: not repo_exists.stat.exists

- name: Update DB password in index.php
  replace:
    path: "{{ repo_dest }}/webroot/index.php"
    regexp: 'tiger'
    replace: '{{ db_password }}'
  # notify: restart nginx
  when: not repo_exists.stat.exists

- name: Run docker-compose to start the services
  ansible.builtin.shell: "docker-compose up -d"
  args:
    chdir: "{{ repo_dest }}"
